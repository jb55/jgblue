#include <stdio.h>
#include "FCollada.h"
#include "FCDVersion.h"
#include "FCDocument.h"
#include "FCDLibrary.h"
#include "FCDGeometry.h"
#include "FCDGeometryMesh.h"
#include "FCDGeometrySource.h"
#include "FUDaeEnum.h"

#include "exporter.h"
#include "asset.h"

using namespace FUDaeGeometryInput;

namespace Exporter {

namespace {

/*
 * Add geometry data to the Collada DOM
 *
 *    type:
 *
 * POSITION    Used for position data.
 * VERTEX   Used to input the vertex sources within a polygon set.
 * NORMAL   Used for surface normal vectors.
 * GEOTANGENT   Used for surface tangent vectors.
 * GEOBINORMAL      Used for surface binormal vectors.
 * TEXCOORD     Used for texture coordinates.
 * TEXTANGENT   Used for texture-aligned surface tangent vectors.
 * TEXBINORMAL      Used for texture-aligned surface binormal vectors.
 * UV   Used for generic mapping parameters.
 * Do not confuse this with TEXCOORD.
 * 
 * COLOR    Used for vertex colors.
 * EXTRA    Used for application-specific vertex data.
 * This is Maya-specific to support blind data.
 * 
 * POINT_SIZE   Used to define the size of the Billboard generated by a given point.
 * This is a type::POINTS specific type. If the size is 0, a single pixel pt is rendered.
 * 
 * POINT_ROTATION   Used to give a billboard orientation.
 * This is a type::POINTS specific type, and is not compulsory
 * 
 * UNKNOWN      An unknown data source.
 */
void AddGeometryData(FCDGeometryMesh* pGeoMesh, float* pData, unsigned int count, Semantic type) {
    FCDGeometrySource* pGeoSource;
    FloatList listData(pData, size_t(count));

    pGeoSource = pGeoMesh->AddVertexSource(type);
    pGeoSource->SetData( listData, 1 );
}

} // Anonymous namespace


void Init() {
    FCollada::Initialize();
}

void Release() {
    FCollada::Release();
}

/*
 * Save an Asset as a Collada document
 */
bool SaveAssetAsCollada(IAsset* pAsset, std::wstring filename) {
    FCDocument fcDoc;
    FCDGeometry* pGeo;
    FCDGeometryLibrary* pGeoLib;
    FCDGeometryMesh* pGeoMesh;
    unsigned int count = 0;
    float* pData = 0;

    pGeoLib = fcDoc.GetGeometryLibrary();
    pGeo = pGeoLib->AddEntity();

    /* Add geometry data for each mesh to the DOM tree */
    for(int i = 0; i < pAsset->GetMeshCount(); ++i) {
        pGeoMesh = pGeo->CreateMesh();

        pData = pAsset->GetVertexPositions(i, count);
        AddGeometryData(pGeoMesh, pData, count, POSITION);

        pData = pAsset->GetVertexIndices(i, count);
        AddGeometryData(pGeoMesh, pData, count, VERTEX);

        pData = pAsset->GetTextureCoords(i, count);
        AddGeometryData(pGeoMesh, pData, count, TEXCOORD);
    }
    
    if ( !FCollada::SaveDocument(&fcDoc, filename.c_str()) )
        printf("Save unsuccessful.\n");
    else
        printf("Saved asset as %ls\n", filename.c_str());
}

void SaveTest() {
    FCDocument* pDoc;

    pDoc = FCollada::NewDocument();
    FCDVersion ver = pDoc->GetVersion();

    printf("FCollada Version: %u\n", FCollada::GetVersion());
    printf("FCDocument Version: %d.%d r%d\n", ver.major, ver.minor, ver.revision);

    wchar_t* filename = L"test.dae";

    if ( !FCollada::SaveDocument(pDoc, filename) )
        printf("Unsuccessful save.\n");
    else
        printf("Saved %ls\n", filename);
}

} // Exporter namespace
